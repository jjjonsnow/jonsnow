Programming exercise - Routing of telephone calls
Some telephone operators have submitted their price lists including price per minute for different phone number prefixes. The price lists look like this:
Operator A:
1	 0.9
268	 5.1
46	 0.17
4620	 0.0
468	 0.15
4631	 0.15
4673	 0.9
46732	 1.1
Operator B:
1	 0.92
44	 0.5
46	 0.2
467	 1.0
48	 1.2
And so on...
The left column represents the telephone prefix (country + area code) and the right column represents the operators price per minute for a number starting with that prefix. When several prefixes match the same number, the longest one should be used. If you, for example, dial +46-73-212345 you will have to pay $ 1.1/min with Operator A and $ 1.0/min with Operator B. 
If a price list does not include a certain prefix you cannot use that operator to dial numbers starting with that prefix. For example it is not possible to dial +44 numbers with operator A but it is possible with Operator B.
The goal with this exercise is to write a program that can handle any number of price lists (operators) and then can calculate which operator that is cheapest for a certain number. You can assume that each price list can have thousands of entries but they will all fit together in memory.
Telephone numbers should be inputted in the same format as in price lists, for example “68123456789”. The challenge is to find the cheapest operator for that number.



Requirements
Use your favorite language to solve the exercise. Put your focus on code design and readability. Do not use a database or create a GUI. Plus is given to effective solutions. The code should be fully unit tested. 
Please build a Dockerfile so we are able to start your solution without installing the environment. As well as a docker-compose file for ease of use:
To run your program we will use the following command:
$ docker-compose run routing
To run the tests we will use the following command:
$ docker-compose run routing-test





[Solution]


opa = {1:0.9, 268:5.1, 46:0.17, 4620:0.0, 468:0.15, 4631:0.15, 4673:0.9, 46732:1.1}
opb = {1:0.92, 44:0.5, 46:0.2, 467:1.0, 48:1.2}
phone_number_prefixes = []
prefix_sets = [opa, opb]

for prefix_set in prefix_sets:
    phone_number_prefixes.extend([prefix for prefix in prefix_set.keys()])

phone_number_prefixes = list(set(phone_number_prefixes))  # get rid of duplicates.

cheapest_rates = {}
for prefix in phone_number_prefixes:
    rate = float('inf')  # everything is less than infinity! ;)
    for prefix_set in prefix_sets:
        if prefix not in prefix_set:
            continue
        if prefix_set[prefix] < rate:
            rate = prefix_set[prefix]
    cheapest_rates.update({prefix: rate})
    
    
    = {1: 0.9, 44: 0.5, 46: 0.17, 48: 1.2, 268: 5.1, 467: 1.0, 468: 0.15, 4620: 0.0, 4631: 0.15, 4673: 0.9, 46732: 1.1}
